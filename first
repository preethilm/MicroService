package com.bos.cpoms.config;

import static springfox.documentation.builders.PathSelectors.regex;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfig {

	@Bean
	public Docket productApi() {
		return new Docket(DocumentationType.SWAGGER_2).apiInfo(getApiInfo()).select()
				.apis(RequestHandlerSelectors.basePackage("com.bos.cpoms.controller"))
				//.paths(regex("/IpoBond.*"))
				.paths(PathSelectors.any())
				.build();
	}

	private ApiInfo getApiInfo() {

		Contact contact = new Contact("xx yy", "", "xxyy@gmail.com");
		return new ApiInfoBuilder().title("REST API").description("REST API for IPO assetclass").version("1.0.")
				.license("Apache License Version 2.0").licenseUrl("http://www.apache.org/licenses/LICENSE-2.0")
				.contact(contact).build();
	}

}


package com.bos.cpoms.controller;

import java.math.BigDecimal;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.bos.cpoms.model.Instrument;
import com.bos.cpoms.repository.InstrumentRepository;
import com.bos.cpoms.service.IpoBondService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@RequestMapping("/ipoBond")
@Api(value = "IPO Bond", description = "Operations pertaining to IPO Bond", tags = "IPO Bond")
public class IpoBondController {

	private static final Logger logger = LoggerFactory.getLogger(IpoBondController.class);

	private InstrumentRepository instrumentRepository;

	private IpoBondService ipoBondService;

	public IpoBondController(IpoBondService ipoBondService, InstrumentRepository instrumentRepository) {
		this.ipoBondService = ipoBondService;
		this.instrumentRepository = instrumentRepository;
	}

	@ApiOperation(value = "View a list of available IPO Bonds", response = Iterable.class)
	@RequestMapping(value = "", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<List<Instrument>> getAllIpoBonds() {

		logger.info("Getting all ipo bond instruments ...");

		List<Instrument> instruments = ipoBondService.getAllIpoBonds();
		return new ResponseEntity<List<Instrument>>(instruments, HttpStatus.OK);
	}

/*	@ApiOperation(value = "Get specific instrument by IPO code", response = Instrument.class)
	@RequestMapping(value = "/{ipoCode}", method = RequestMethod.GET)
	@ApiResponses(value = { @ApiResponse(code = 404, message = "Instrument not found") })
	public ResponseEntity<Instrument> getInstrumentByIpocode(
			@ApiParam(value = "Ipo code of the instrument", required = true) @PathVariable("ipoCode") String ipoCode) {
		logger.info("----- Getting specific instrument by ipocode {}", ipoCode);

		Instrument instrument = ipoBondService.getInstrumentByIpocode(ipoCode);
		if (null == instrument) {
			return new ResponseEntity<Instrument>(instrument, HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Instrument>(instrument, HttpStatus.OK);
	}*/

	@ApiOperation(value = "Get specific instrument by yield & Spread", response = Instrument.class)
	@RequestMapping(value = "/{yield}/{spread}", method = RequestMethod.GET)
	@ApiResponses(value = { @ApiResponse(code = 404, message = "Instrument not found") })
	public ResponseEntity<List<Instrument>> getInstrumentByYieldAndSpread(@PathVariable("yield") BigDecimal yield,
			@PathVariable("spread") BigDecimal spread) {
		logger.info("----- Getting specific instrument by yeild {} and spread {}", yield, spread);

		List<Instrument> instruments = ipoBondService.getInstrumentByYieldAndSpread(yield, spread);
		if (instruments.isEmpty()) {
			return new ResponseEntity<List<Instrument>>(instruments, HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<List<Instrument>>(instruments, HttpStatus.OK);
	}

	@ApiOperation(value = "Create IPO Bond", response = Instrument.class)
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public ResponseEntity<Instrument> createInstrument(@RequestBody Instrument instrument) {
		logger.info("----- creating instrument : {}", instrument.getIpoCode());
		Instrument newInstrument = ipoBondService.saveInstrument(instrument);
		return new ResponseEntity<Instrument>(newInstrument, HttpStatus.CREATED);
	}

	@ApiOperation(value = "Update IPO Bond")
	@RequestMapping(value = "/update", method = RequestMethod.PUT)
	public ResponseEntity<Instrument> updateInstrument(@RequestParam("ipoCode") String ipoCode,
			@RequestBody Instrument updateInstrument) {

		logger.info("----- Updating instrument for ipocode {} with description {}", ipoCode,
				updateInstrument.getIpoFullDescription());

		Instrument instrument = ipoBondService.getInstrumentByIpocode(ipoCode);

		if (null == instrument) {
			return new ResponseEntity<Instrument>(HttpStatus.NOT_FOUND);
		}

		Instrument newInstrument = ipoBondService.saveInstrument(updateInstrument);
		return new ResponseEntity<Instrument>(newInstrument, HttpStatus.OK);
	}

	@ApiOperation(value = "Delete IPO Bond")
	@RequestMapping(value = "/delete/{ipoCode}", method = RequestMethod.DELETE)
	public ResponseEntity<Void> deleteInstrument(@PathVariable("ipoCode") String ipoCode) {

		logger.info("----- Deleting instrument for ipocode {} ", ipoCode);

		Instrument instrument = ipoBondService.getInstrumentByIpocode(ipoCode);

		if (null == instrument) {
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		}

		instrumentRepository.delete(ipoCode);
		return new ResponseEntity<Void>(HttpStatus.OK);
	}
	
	@ApiOperation(value = "Get all the revisions of instrument", response = Iterable.class)
	@RequestMapping(value = "/{ipoCode}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })	
	public ResponseEntity<List<Instrument>> getAllRevisionForInstrument(@PathVariable("ipoCode")String ipoCode){
		logger.info("Getting all revisions ...");		
		List<Instrument> instruments = instrumentRepository.getAllRevisionForInstrument(ipoCode);
		return new ResponseEntity<List<Instrument>>(instruments, HttpStatus.OK);
	}
	

}


package com.bos.cpoms.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.bos.cpoms.model.Instrument;
import com.bos.cpoms.repository.InstrumentRepository;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/ipoEquity")
@Api(value="IPO Equity", description="Operations pertaining to IPO Equity",tags="IPO Equity")
public class IpoEquityController {
	
	private static final Logger logger = LoggerFactory.getLogger(IpoEquityController.class);

	@Autowired
	InstrumentRepository instrumentRepository;

	@ApiOperation(value = "View a list of available IPO Equity",response = Iterable.class)
	@RequestMapping(value = "", method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<List<Instrument>> getAllIpoEquities() {
		logger.info("Getting all ipo equity instruments ...");
		List<Instrument> instruments = instrumentRepository.findAll();
		return new ResponseEntity<List<Instrument>>(instruments, HttpStatus.OK);
	}

}
package com.bos.cpoms.model;

import java.io.Serializable;
import java.math.BigDecimal;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.envers.Audited;

@Entity
@Table(name="INSTRUMENT")
@Audited
public class Instrument implements Serializable {

	/**
	 **/
	private static final long serialVersionUID = 1L;
	
	@Id
	@Column(name="IPO_CODE")
	private String ipoCode;

	@Column(name="IPO_FULL_DESCRIPTION")
	private String ipoFullDescription;

	@Column(name="SPREAD")
	private BigDecimal spread;

	@Column(name="YIELD")
	private BigDecimal yield;
	
	public Instrument(){
		
	}

	public Instrument(String ipoCode, String ipoFullDescription, BigDecimal spread, BigDecimal yield) {
		this.ipoCode = ipoCode;
		this.ipoFullDescription = ipoFullDescription;
		this.spread = spread;
		this.yield = yield;
	}

	public String getIpoCode() {
		return ipoCode;
	}

	public void setIpoCode(String ipoCode) {
		this.ipoCode = ipoCode;
	}

	public String getIpoFullDescription() {
		return ipoFullDescription;
	}

	public void setIpoFullDescription(String ipoFullDescription) {
		this.ipoFullDescription = ipoFullDescription;
	}

	public BigDecimal getSpread() {
		return spread;
	}

	public void setSpread(BigDecimal spread) {
		this.spread = spread;
	}

	public BigDecimal getYield() {
		return yield;
	}

	public void setYield(BigDecimal yield) {
		this.yield = yield;
	}

	
}
