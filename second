package com.bos.cpoms.repository;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.bos.cpoms.model.Instrument;


@Repository
public interface InstrumentRepository extends JpaRepository<Instrument, String>,InstrumentRepositoryCustom {
	
	List<Instrument> findByYieldAndSpread(BigDecimal yield, BigDecimal spread);
	
}


package com.bos.cpoms.repository;

import java.util.List;

import com.bos.cpoms.model.Instrument;

public interface InstrumentRepositoryCustom {
	
	List<Instrument> getAllRevisionForInstrument(String ipoCode);
}


package com.bos.cpoms.repository;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.hibernate.envers.AuditReader;
import org.hibernate.envers.AuditReaderFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.bos.cpoms.model.Instrument;
import com.google.common.collect.Lists;

@Repository
@Transactional
public class InstrumentRepositoryImpl implements InstrumentRepositoryCustom {
	
	
	private static final Logger logger = LoggerFactory.getLogger(InstrumentRepositoryImpl.class);
	
	@PersistenceContext
	private EntityManager entityManagerFactoryBean;	

	public List<Instrument> getAllRevisionForInstrument(String ipoCode){
		
		AuditReader auditReader = AuditReaderFactory.get(entityManagerFactoryBean);
		List<Number> revisionNumbers = auditReader.getRevisions(Instrument.class, ipoCode);
		
		List<Instrument> revisionedInstruments = Lists.newArrayList();
		
		for (Number revision : revisionNumbers) {
			Instrument auditedInstrument = auditReader.find(Instrument.class, ipoCode, revision);	
			revisionedInstruments.add(auditedInstrument);
			logger.info("Instrument {} at revision {}",auditedInstrument,revision);			
		}
		
		return revisionedInstruments;
	}
	
}


package com.bos.cpoms.service;

import java.math.BigDecimal;
import java.util.List;

import com.bos.cpoms.model.Instrument;


public interface IpoBondService {
	
	List<Instrument> getAllIpoBonds();
	
	Instrument getInstrumentByIpocode(String ipoCode);
	
	List<Instrument> getInstrumentByYieldAndSpread(BigDecimal yield, BigDecimal spread);
	
	Instrument saveInstrument(Instrument instrument);	
	
}


package com.bos.cpoms.service;

import java.math.BigDecimal;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.bos.cpoms.model.Instrument;
import com.bos.cpoms.repository.InstrumentRepository;

@Service(value="ipoBondService")
public class IpoBondServiceImpl implements IpoBondService{
	
	private static final Logger logger = LoggerFactory.getLogger(IpoBondServiceImpl.class);
	
	private InstrumentRepository instrumentRepository;
	
	public IpoBondServiceImpl(InstrumentRepository instrumentRepository){
		this.instrumentRepository = instrumentRepository;
	}

	public List<Instrument> getAllIpoBonds() {
		logger.info("---Getting all instruments ...");
		return instrumentRepository.findAll();
	}

	public Instrument getInstrumentByIpocode(String ipoCode) {
		logger.info("----- Getting specific instrument by ipocode----");
		return instrumentRepository.findOne(ipoCode);
	}

	public List<Instrument> getInstrumentByYieldAndSpread(BigDecimal yield, BigDecimal spread) {	
		logger.info("----- getInstrumentByYieldAndSpread -----");
		return instrumentRepository.findByYieldAndSpread(yield, spread);
	}

	public Instrument saveInstrument(Instrument instrument) {
		logger.info("----- save instrument --------");
		return instrumentRepository.save(instrument);
	}
	
}
